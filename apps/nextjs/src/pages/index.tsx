import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import type { inferProcedureOutput } from "@trpc/server";
import type { AppRouter } from "@photo-tag/api";
import { useAuth, UserButton } from "@clerk/nextjs";
import Link from "next/link";
import Image from "next/image";

const PostCard: React.FC<{
  post: inferProcedureOutput<AppRouter["post"]["all"]>[number];
}> = ({ post }) => {
  return (
    <div className="max-w-2xl rounded-lg border-2 border-gray-500 p-4 transition-all hover:scale-[101%]">
      <h2 className="text-2xl font-bold">
        {post.title}
      </h2>
      <div className="flex justify-center content-center">
        <Image src={post.imageUrl}
          height={200}
          width={200}
          alt={post.title}
        />
      </div>

      <p>{post.content}</p>
    </div>
  );
};

const Home: NextPage = () => {
  const postQuery = trpc.post.all.useQuery();

  return (
    <>
      <Head>
        <title>Photo Tag</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen flex-col items-center">
        <div className="container flex flex-col  gap-12 px-4 py-8">
          <div className="flex justify-between items-center">
            <h1 className="text-2xl font-extrabold sm:text-[2rem]">
              Photo Tag
            </h1>
            <AuthButton />
          </div>

          <div className="items-center justify-center">
            <div className="flex h-[80vh] justify-center overflow-y-scroll px-4 text-2xl">
              {postQuery.data ? (
                <div className="flex flex-col gap-4">
                  {postQuery.data?.map((p: inferProcedureOutput<AppRouter["post"]["all"]>[number]) => {
                    return <PostCard key={p.id} post={p} />;
                  })}
                </div>
              ) : (
                <p>No Posts yet!</p>
              )}
            </div>
          </div>

        </div>
      </main>
    </>
  );
};

export default Home;

const AuthButton: React.FC = () => {
  const { isSignedIn } = useAuth();

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      {isSignedIn && (
        <>
          <div className="flex items-center justify-center">
            <UserButton
              appearance={{
                elements: {
                  userButtonAvatarBox: {
                    width: "3rem",
                    height: "3rem",
                  },
                },
              }}
            />
          </div>
        </>
      )}
      {!isSignedIn && (
        <p className="text-center text-2xl">
          <Link href="/sign-in">Sign In</Link>
        </p>
      )}
    </div>
  );
};
